
stm32f411ceu6_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a20  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bb8  08000bc0  00001bc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bb8  08000bb8  00001bc0  2**0
                  CONTENTS
  4 .ARM          00000000  08000bb8  08000bb8  00001bc0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bb8  08000bc0  00001bc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bb8  08000bb8  00001bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000bbc  08000bbc  00001bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001bc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000bc0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000bc0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001175  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000407  00000000  00000000  00002d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00003170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e4  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020d2  00000000  00000000  00003394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000016e7  00000000  00000000  00005466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000917d  00000000  00000000  00006b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000fcca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000044c  00000000  00000000  0000fd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0001015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000ba0 	.word	0x08000ba0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000ba0 	.word	0x08000ba0

080001d8 <delay>:
 * Alternate Functionality Mode : 5
 */



	void delay(void){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
		for(uint32_t i=0 ; i< 1000000 ; i++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	@ (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
	}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	000f423f 	.word	0x000f423f

08000204 <SPI2_GPIOInits>:


	void SPI2_GPIOInits(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
		GPIO_Handle_t SPIPins;
		SPIPins.pGPIOx = GPIOB;
 800020a:	4b14      	ldr	r3, [pc, #80]	@ (800025c <SPI2_GPIOInits+0x58>)
 800020c:	607b      	str	r3, [r7, #4]
		SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
		SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000212:	2305      	movs	r3, #5
 8000214:	737b      	strb	r3, [r7, #13]
		SPIPins.GPIO_PinConfig.GPIO_PinOPType= GPIO_OP_TYPE_PP;
 8000216:	2300      	movs	r3, #0
 8000218:	733b      	strb	r3, [r7, #12]
		SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800021a:	2300      	movs	r3, #0
 800021c:	72fb      	strb	r3, [r7, #11]
		SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021e:	2302      	movs	r3, #2
 8000220:	72bb      	strb	r3, [r7, #10]

		//SCLK
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000222:	230d      	movs	r3, #13
 8000224:	723b      	strb	r3, [r7, #8]
		GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f96b 	bl	8000504 <GPIO_Init>

		//MOSI
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800022e:	230f      	movs	r3, #15
 8000230:	723b      	strb	r3, [r7, #8]
		GPIO_Init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f965 	bl	8000504 <GPIO_Init>

		//MISO
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800023a:	230e      	movs	r3, #14
 800023c:	723b      	strb	r3, [r7, #8]
		GPIO_Init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f95f 	bl	8000504 <GPIO_Init>

		//NSS
		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000246:	230c      	movs	r3, #12
 8000248:	723b      	strb	r3, [r7, #8]
		GPIO_Init(&SPIPins);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f959 	bl	8000504 <GPIO_Init>
	}
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40020400 	.word	0x40020400

08000260 <SPI2_Inits>:

	void SPI2_Inits(void){
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0

		SPI_Handle_t spi2handle;

		spi2handle.pSPIx = SPI2;
 8000266:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <SPI2_Inits+0x38>)
 8000268:	607b      	str	r3, [r7, #4]
		spi2handle.SPIConfig.SPI_DeviceMode = SPI_MASTER;
 800026a:	2301      	movs	r3, #1
 800026c:	723b      	strb	r3, [r7, #8]
		spi2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800026e:	2300      	movs	r3, #0
 8000270:	727b      	strb	r3, [r7, #9]
		spi2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;	//generates SCLK of 8 MHz
 8000272:	2302      	movs	r3, #2
 8000274:	72bb      	strb	r3, [r7, #10]
		spi2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000276:	2300      	movs	r3, #0
 8000278:	72fb      	strb	r3, [r7, #11]
		spi2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800027a:	2300      	movs	r3, #0
 800027c:	733b      	strb	r3, [r7, #12]
		spi2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	737b      	strb	r3, [r7, #13]
		spi2handle.SPIConfig.SPI_SSM = SPI_SSM_DI;		//software slave management enabled for NSS pin
 8000282:	2300      	movs	r3, #0
 8000284:	73bb      	strb	r3, [r7, #14]

		SPI_Init(&spi2handle);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fb8d 	bl	80009a8 <SPI_Init>
	}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40003800 	.word	0x40003800

0800029c <SPI_VerifyResponse>:
		GPIO_Button.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;

		GPIO_Init(&GPIO_Button);
	}

	uint8_t SPI_VerifyResponse(uint8_t ackbyte){
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
		if(ackbyte == 0xF5){
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2bf5      	cmp	r3, #245	@ 0xf5
 80002aa:	d101      	bne.n	80002b0 <SPI_VerifyResponse+0x14>
			return 1;
 80002ac:	2301      	movs	r3, #1
 80002ae:	e000      	b.n	80002b2 <SPI_VerifyResponse+0x16>
		}
		else {
			return 0;
 80002b0:	2300      	movs	r3, #0
		}
	}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
	...

080002c0 <main>:

int main(void){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0

	uint8_t dummy_write = 0xff;
 80002c6:	23ff      	movs	r3, #255	@ 0xff
 80002c8:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy_read;

	// This function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80002ca:	f7ff ff9b 	bl	8000204 <SPI2_GPIOInits>

	//Initialize the handle structure of SPI
	SPI2_Inits();
 80002ce:	f7ff ffc7 	bl	8000260 <SPI2_Inits>

	/*
	 * Making SSOE 1 does NSS output enable. The NSS pin is automatically managed by the hardware i.e. when SPE=1 ,
	 * NSS pin will be pulled to low and NSS pin will be high when SPE=0
	 */
	SPI_SSOE_Config(SPI2, ENABLE);
 80002d2:	2101      	movs	r1, #1
 80002d4:	4824      	ldr	r0, [pc, #144]	@ (8000368 <main+0xa8>)
 80002d6:	f000 fb4b 	bl	8000970 <SPI_SSOE_Config>

	while(1){

		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80002da:	bf00      	nop
 80002dc:	2100      	movs	r1, #0
 80002de:	4823      	ldr	r0, [pc, #140]	@ (800036c <main+0xac>)
 80002e0:	f000 fa8c 	bl	80007fc <GPIO_ReadFromInputPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f8      	beq.n	80002dc <main+0x1c>

		//to avoid button debouncing :
		delay();
 80002ea:	f7ff ff75 	bl	80001d8 <delay>

		//Enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 80002ee:	2101      	movs	r1, #1
 80002f0:	481d      	ldr	r0, [pc, #116]	@ (8000368 <main+0xa8>)
 80002f2:	f000 fb21 	bl	8000938 <SPI_PeripheralControl>

		//1. CMD_LED_CTRL	<pin_no(1)> 	<value(1)>
		uint8_t commandcode = COMMAND_LED_CONTROL;
 80002f6:	2350      	movs	r3, #80	@ 0x50
 80002f8:	717b      	strb	r3, [r7, #5]
		uint8_t ackbyte;
		uint8_t args[2];
		SPI_SendData(SPI2, &commandcode, 1);
 80002fa:	1d7b      	adds	r3, r7, #5
 80002fc:	2201      	movs	r2, #1
 80002fe:	4619      	mov	r1, r3
 8000300:	4819      	ldr	r0, [pc, #100]	@ (8000368 <main+0xa8>)
 8000302:	f000 fbbb 	bl	8000a7c <SPI_SendData>

		//DO DUMMY READ TO CLEAR OFF THE RXNE
		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000306:	1dbb      	adds	r3, r7, #6
 8000308:	2201      	movs	r2, #1
 800030a:	4619      	mov	r1, r3
 800030c:	4816      	ldr	r0, [pc, #88]	@ (8000368 <main+0xa8>)
 800030e:	f000 fbec 	bl	8000aea <SPI_RecieveData>

		//Send some dummy bits (1 byte ) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000312:	1dfb      	adds	r3, r7, #7
 8000314:	2201      	movs	r2, #1
 8000316:	4619      	mov	r1, r3
 8000318:	4813      	ldr	r0, [pc, #76]	@ (8000368 <main+0xa8>)
 800031a:	f000 fbaf 	bl	8000a7c <SPI_SendData>

		//read the ack byte received
		SPI_RecieveData(SPI2, &ackbyte, 1);
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2201      	movs	r2, #1
 8000322:	4619      	mov	r1, r3
 8000324:	4810      	ldr	r0, [pc, #64]	@ (8000368 <main+0xa8>)
 8000326:	f000 fbe0 	bl	8000aea <SPI_RecieveData>

		if(SPI_VerifyResponse(ackbyte)){
 800032a:	793b      	ldrb	r3, [r7, #4]
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ffb5 	bl	800029c <SPI_VerifyResponse>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d009      	beq.n	800034c <main+0x8c>
			// send arguments
			args[0] = LED_PIN;
 8000338:	2309      	movs	r3, #9
 800033a:	703b      	strb	r3, [r7, #0]
			args[1] = LED_ON;
 800033c:	2301      	movs	r3, #1
 800033e:	707b      	strb	r3, [r7, #1]
			SPI_SendData(SPI2, args, 2);
 8000340:	463b      	mov	r3, r7
 8000342:	2202      	movs	r2, #2
 8000344:	4619      	mov	r1, r3
 8000346:	4808      	ldr	r0, [pc, #32]	@ (8000368 <main+0xa8>)
 8000348:	f000 fb98 	bl	8000a7c <SPI_SendData>
		}

		//lets confirm SPI is not busy
		while( SPI_GetFlagSTatus(SPI2, SPI_BUSY_FLAG));
 800034c:	bf00      	nop
 800034e:	2180      	movs	r1, #128	@ 0x80
 8000350:	4805      	ldr	r0, [pc, #20]	@ (8000368 <main+0xa8>)
 8000352:	f000 fb7f 	bl	8000a54 <SPI_GetFlagSTatus>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d1f8      	bne.n	800034e <main+0x8e>

		//disable the SPI2 peripheral
		SPI_PeriClockControl(SPI2, DISABLE);
 800035c:	2100      	movs	r1, #0
 800035e:	4802      	ldr	r0, [pc, #8]	@ (8000368 <main+0xa8>)
 8000360:	f000 fa62 	bl	8000828 <SPI_PeriClockControl>
	while(1){
 8000364:	e7b9      	b.n	80002da <main+0x1a>
 8000366:	bf00      	nop
 8000368:	40003800 	.word	0x40003800
 800036c:	40020000 	.word	0x40020000

08000370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000370:	480d      	ldr	r0, [pc, #52]	@ (80003a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000372:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000374:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000378:	480c      	ldr	r0, [pc, #48]	@ (80003ac <LoopForever+0x6>)
  ldr r1, =_edata
 800037a:	490d      	ldr	r1, [pc, #52]	@ (80003b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800037c:	4a0d      	ldr	r2, [pc, #52]	@ (80003b4 <LoopForever+0xe>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0a      	ldr	r2, [pc, #40]	@ (80003b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000390:	4c0a      	ldr	r4, [pc, #40]	@ (80003bc <LoopForever+0x16>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039e:	f000 fbdb 	bl	8000b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff ff8d 	bl	80002c0 <main>

080003a6 <LoopForever>:

LoopForever:
  b LoopForever
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
  ldr   r0, =_estack
 80003a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b4:	08000bc0 	.word	0x08000bc0
  ldr r2, =_sbss
 80003b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003bc:	2000001c 	.word	0x2000001c

080003c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC_IRQHandler>
	...

080003c4 <GPIO_PeriClockControl>:
 * Param[in]:			Enable or Disable macros
 *
 * Return: 				None
 * Note:				None
 *************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx , uint8_t EnorDi){
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE){
 80003d0:	78fb      	ldrb	r3, [r7, #3]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d141      	bne.n	800045a <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a43      	ldr	r2, [pc, #268]	@ (80004e8 <GPIO_PeriClockControl+0x124>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0x28>
			GPIOA_PERI_CLOCK_EN();
 80003de:	4b43      	ldr	r3, [pc, #268]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e2:	4a42      	ldr	r2, [pc, #264]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		else if (pGPIOx == GPIOH){
			GPIOH_PERI_CLOCK_DI();
		}
	}
}
 80003ea:	e077      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a40      	ldr	r2, [pc, #256]	@ (80004f0 <GPIO_PeriClockControl+0x12c>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriClockControl+0x3e>
			GPIOB_PERI_CLOCK_EN();
 80003f4:	4b3d      	ldr	r3, [pc, #244]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f8:	4a3c      	ldr	r2, [pc, #240]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80003fa:	f043 0302 	orr.w	r3, r3, #2
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000400:	e06c      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a3b      	ldr	r2, [pc, #236]	@ (80004f4 <GPIO_PeriClockControl+0x130>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0x54>
			GPIOC_PERI_CLOCK_EN();
 800040a:	4b38      	ldr	r3, [pc, #224]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040e:	4a37      	ldr	r2, [pc, #220]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000410:	f043 0304 	orr.w	r3, r3, #4
 8000414:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000416:	e061      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a37      	ldr	r2, [pc, #220]	@ (80004f8 <GPIO_PeriClockControl+0x134>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0x6a>
			GPIOD_PERI_CLOCK_EN();
 8000420:	4b32      	ldr	r3, [pc, #200]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000424:	4a31      	ldr	r2, [pc, #196]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042c:	e056      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOE){
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a32      	ldr	r2, [pc, #200]	@ (80004fc <GPIO_PeriClockControl+0x138>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriClockControl+0x80>
			GPIOE_PERI_CLOCK_EN();
 8000436:	4b2d      	ldr	r3, [pc, #180]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043a:	4a2c      	ldr	r2, [pc, #176]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 800043c:	f043 0310 	orr.w	r3, r3, #16
 8000440:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000442:	e04b      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOH){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a2e      	ldr	r2, [pc, #184]	@ (8000500 <GPIO_PeriClockControl+0x13c>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d147      	bne.n	80004dc <GPIO_PeriClockControl+0x118>
			GPIOH_PERI_CLOCK_EN();
 800044c:	4b27      	ldr	r3, [pc, #156]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000450:	4a26      	ldr	r2, [pc, #152]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000456:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000458:	e040      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a22      	ldr	r2, [pc, #136]	@ (80004e8 <GPIO_PeriClockControl+0x124>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PeriClockControl+0xac>
			GPIOA_PERI_CLOCK_DI();
 8000462:	4b22      	ldr	r3, [pc, #136]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000466:	4a21      	ldr	r2, [pc, #132]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000468:	f023 0301 	bic.w	r3, r3, #1
 800046c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046e:	e035      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a1f      	ldr	r2, [pc, #124]	@ (80004f0 <GPIO_PeriClockControl+0x12c>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d106      	bne.n	8000486 <GPIO_PeriClockControl+0xc2>
			GPIOB_PERI_CLOCK_DI();
 8000478:	4b1c      	ldr	r3, [pc, #112]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047c:	4a1b      	ldr	r2, [pc, #108]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 800047e:	f023 0302 	bic.w	r3, r3, #2
 8000482:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000484:	e02a      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC){
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a1a      	ldr	r2, [pc, #104]	@ (80004f4 <GPIO_PeriClockControl+0x130>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_PeriClockControl+0xd8>
			GPIOC_PERI_CLOCK_DI();
 800048e:	4b17      	ldr	r3, [pc, #92]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000492:	4a16      	ldr	r2, [pc, #88]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000494:	f023 0304 	bic.w	r3, r3, #4
 8000498:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049a:	e01f      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD){
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a16      	ldr	r2, [pc, #88]	@ (80004f8 <GPIO_PeriClockControl+0x134>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d106      	bne.n	80004b2 <GPIO_PeriClockControl+0xee>
			GPIOD_PERI_CLOCK_DI();
 80004a4:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a8:	4a10      	ldr	r2, [pc, #64]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80004aa:	f023 0308 	bic.w	r3, r3, #8
 80004ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b0:	e014      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOE){
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a11      	ldr	r2, [pc, #68]	@ (80004fc <GPIO_PeriClockControl+0x138>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d106      	bne.n	80004c8 <GPIO_PeriClockControl+0x104>
			GPIOE_PERI_CLOCK_DI();
 80004ba:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004be:	4a0b      	ldr	r2, [pc, #44]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80004c0:	f023 0310 	bic.w	r3, r3, #16
 80004c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c6:	e009      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOH){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000500 <GPIO_PeriClockControl+0x13c>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d105      	bne.n	80004dc <GPIO_PeriClockControl+0x118>
			GPIOH_PERI_CLOCK_DI();
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d4:	4a05      	ldr	r2, [pc, #20]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80004d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40020000 	.word	0x40020000
 80004ec:	40023800 	.word	0x40023800
 80004f0:	40020400 	.word	0x40020400
 80004f4:	40020800 	.word	0x40020800
 80004f8:	40020c00 	.word	0x40020c00
 80004fc:	40021000 	.word	0x40021000
 8000500:	40021c00 	.word	0x40021c00

08000504 <GPIO_Init>:

// Init and De-Init :

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2101      	movs	r1, #1
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff54 	bl	80003c4 <GPIO_PeriClockControl>
	//1.Configure the mode of the GPIO pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	795b      	ldrb	r3, [r3, #5]
 8000520:	2b03      	cmp	r3, #3
 8000522:	d821      	bhi.n	8000568 <GPIO_Init+0x64>
		temp = pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	461a      	mov	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  // clearing
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	791b      	ldrb	r3, [r3, #4]
 8000540:	4619      	mov	r1, r3
 8000542:	2303      	movs	r3, #3
 8000544:	408b      	lsls	r3, r1
 8000546:	43db      	mvns	r3, r3
 8000548:	4619      	mov	r1, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	400a      	ands	r2, r1
 8000550:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;		//setting
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6819      	ldr	r1, [r3, #0]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	697a      	ldr	r2, [r7, #20]
 800055e:	430a      	orrs	r2, r1
 8000560:	601a      	str	r2, [r3, #0]
		temp=0;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e09b      	b.n	80006a0 <GPIO_Init+0x19c>
	}
	else{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	795b      	ldrb	r3, [r3, #5]
 800056c:	2b04      	cmp	r3, #4
 800056e:	d117      	bne.n	80005a0 <GPIO_Init+0x9c>
			//1.configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000570:	4b9a      	ldr	r3, [pc, #616]	@ (80007dc <GPIO_Init+0x2d8>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7912      	ldrb	r2, [r2, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	4a96      	ldr	r2, [pc, #600]	@ (80007dc <GPIO_Init+0x2d8>)
 8000582:	430b      	orrs	r3, r1
 8000584:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000586:	4b95      	ldr	r3, [pc, #596]	@ (80007dc <GPIO_Init+0x2d8>)
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7912      	ldrb	r2, [r2, #4]
 800058e:	4611      	mov	r1, r2
 8000590:	2201      	movs	r2, #1
 8000592:	408a      	lsls	r2, r1
 8000594:	43d2      	mvns	r2, r2
 8000596:	4611      	mov	r1, r2
 8000598:	4a90      	ldr	r2, [pc, #576]	@ (80007dc <GPIO_Init+0x2d8>)
 800059a:	400b      	ands	r3, r1
 800059c:	6093      	str	r3, [r2, #8]
 800059e:	e035      	b.n	800060c <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	795b      	ldrb	r3, [r3, #5]
 80005a4:	2b05      	cmp	r3, #5
 80005a6:	d117      	bne.n	80005d8 <GPIO_Init+0xd4>
			//1.configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a8:	4b8c      	ldr	r3, [pc, #560]	@ (80007dc <GPIO_Init+0x2d8>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	7912      	ldrb	r2, [r2, #4]
 80005b0:	4611      	mov	r1, r2
 80005b2:	2201      	movs	r2, #1
 80005b4:	408a      	lsls	r2, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a88      	ldr	r2, [pc, #544]	@ (80007dc <GPIO_Init+0x2d8>)
 80005ba:	430b      	orrs	r3, r1
 80005bc:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005be:	4b87      	ldr	r3, [pc, #540]	@ (80007dc <GPIO_Init+0x2d8>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7912      	ldrb	r2, [r2, #4]
 80005c6:	4611      	mov	r1, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	408a      	lsls	r2, r1
 80005cc:	43d2      	mvns	r2, r2
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a82      	ldr	r2, [pc, #520]	@ (80007dc <GPIO_Init+0x2d8>)
 80005d2:	400b      	ands	r3, r1
 80005d4:	60d3      	str	r3, [r2, #12]
 80005d6:	e019      	b.n	800060c <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	795b      	ldrb	r3, [r3, #5]
 80005dc:	2b06      	cmp	r3, #6
 80005de:	d115      	bne.n	800060c <GPIO_Init+0x108>
			//1.configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e0:	4b7e      	ldr	r3, [pc, #504]	@ (80007dc <GPIO_Init+0x2d8>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	7912      	ldrb	r2, [r2, #4]
 80005e8:	4611      	mov	r1, r2
 80005ea:	2201      	movs	r2, #1
 80005ec:	408a      	lsls	r2, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	4a7a      	ldr	r2, [pc, #488]	@ (80007dc <GPIO_Init+0x2d8>)
 80005f2:	430b      	orrs	r3, r1
 80005f4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f6:	4b79      	ldr	r3, [pc, #484]	@ (80007dc <GPIO_Init+0x2d8>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7912      	ldrb	r2, [r2, #4]
 80005fe:	4611      	mov	r1, r2
 8000600:	2201      	movs	r2, #1
 8000602:	408a      	lsls	r2, r1
 8000604:	4611      	mov	r1, r2
 8000606:	4a75      	ldr	r2, [pc, #468]	@ (80007dc <GPIO_Init+0x2d8>)
 8000608:	430b      	orrs	r3, r1
 800060a:	6093      	str	r3, [r2, #8]

		}

		//2.configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	089b      	lsrs	r3, r3, #2
 8000612:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	f003 0303 	and.w	r3, r3, #3
 800061c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDRESS_TO_CODE(pGPIOHandle->pGPIOx);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a6f      	ldr	r2, [pc, #444]	@ (80007e0 <GPIO_Init+0x2dc>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d024      	beq.n	8000672 <GPIO_Init+0x16e>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a6d      	ldr	r2, [pc, #436]	@ (80007e4 <GPIO_Init+0x2e0>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d01d      	beq.n	800066e <GPIO_Init+0x16a>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a6c      	ldr	r2, [pc, #432]	@ (80007e8 <GPIO_Init+0x2e4>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d016      	beq.n	800066a <GPIO_Init+0x166>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a6a      	ldr	r2, [pc, #424]	@ (80007ec <GPIO_Init+0x2e8>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d00f      	beq.n	8000666 <GPIO_Init+0x162>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a69      	ldr	r2, [pc, #420]	@ (80007f0 <GPIO_Init+0x2ec>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d008      	beq.n	8000662 <GPIO_Init+0x15e>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a67      	ldr	r2, [pc, #412]	@ (80007f4 <GPIO_Init+0x2f0>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d101      	bne.n	800065e <GPIO_Init+0x15a>
 800065a:	2307      	movs	r3, #7
 800065c:	e00a      	b.n	8000674 <GPIO_Init+0x170>
 800065e:	2300      	movs	r3, #0
 8000660:	e008      	b.n	8000674 <GPIO_Init+0x170>
 8000662:	2304      	movs	r3, #4
 8000664:	e006      	b.n	8000674 <GPIO_Init+0x170>
 8000666:	2303      	movs	r3, #3
 8000668:	e004      	b.n	8000674 <GPIO_Init+0x170>
 800066a:	2302      	movs	r3, #2
 800066c:	e002      	b.n	8000674 <GPIO_Init+0x170>
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <GPIO_Init+0x170>
 8000672:	2300      	movs	r3, #0
 8000674:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000676:	7c7a      	ldrb	r2, [r7, #17]
 8000678:	7cbb      	ldrb	r3, [r7, #18]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	fa02 f103 	lsl.w	r1, r2, r3
 8000680:	4a5d      	ldr	r2, [pc, #372]	@ (80007f8 <GPIO_Init+0x2f4>)
 8000682:	7cfb      	ldrb	r3, [r7, #19]
 8000684:	3302      	adds	r3, #2
 8000686:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3.eNnable the exti interrupt delivery using IMR
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068a:	4b54      	ldr	r3, [pc, #336]	@ (80007dc <GPIO_Init+0x2d8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	7912      	ldrb	r2, [r2, #4]
 8000692:	4611      	mov	r1, r2
 8000694:	2201      	movs	r2, #1
 8000696:	408a      	lsls	r2, r1
 8000698:	4611      	mov	r1, r2
 800069a:	4a50      	ldr	r2, [pc, #320]	@ (80007dc <GPIO_Init+0x2d8>)
 800069c:	430b      	orrs	r3, r1
 800069e:	6013      	str	r3, [r2, #0]
	}
	temp=0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]

	//2.Configure the Speed of the GPIO pin
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	799b      	ldrb	r3, [r3, #6]
 80006a8:	461a      	mov	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  // clearing
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	4619      	mov	r1, r3
 80006c2:	2303      	movs	r3, #3
 80006c4:	408b      	lsls	r3, r1
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4619      	mov	r1, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	400a      	ands	r2, r1
 80006d0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	6899      	ldr	r1, [r3, #8]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	430a      	orrs	r2, r1
 80006e0:	609a      	str	r2, [r3, #8]
	temp =0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]

	//3.Configure the PUPD Settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	79db      	ldrb	r3, [r3, #7]
 80006ea:	461a      	mov	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  // clearing
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68da      	ldr	r2, [r3, #12]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	4619      	mov	r1, r3
 8000704:	2303      	movs	r3, #3
 8000706:	408b      	lsls	r3, r1
 8000708:	43db      	mvns	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	400a      	ands	r2, r1
 8000712:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	68d9      	ldr	r1, [r3, #12]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	697a      	ldr	r2, [r7, #20]
 8000720:	430a      	orrs	r2, r1
 8000722:	60da      	str	r2, [r3, #12]
	temp =0;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

	//4.Configure the O/P Type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	7a1b      	ldrb	r3, [r3, #8]
 800072c:	461a      	mov	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	791b      	ldrb	r3, [r3, #4]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  // clearing
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	685a      	ldr	r2, [r3, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	4619      	mov	r1, r3
 8000744:	2301      	movs	r3, #1
 8000746:	408b      	lsls	r3, r1
 8000748:	43db      	mvns	r3, r3
 800074a:	4619      	mov	r1, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	400a      	ands	r2, r1
 8000752:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6859      	ldr	r1, [r3, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	697a      	ldr	r2, [r7, #20]
 8000760:	430a      	orrs	r2, r1
 8000762:	605a      	str	r2, [r3, #4]
	temp =0;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

	//5.Configure the Alternate Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	795b      	ldrb	r3, [r3, #5]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d131      	bne.n	80007d4 <GPIO_Init+0x2d0>
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8 ;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	08db      	lsrs	r3, r3, #3
 8000776:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8 ;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	f003 0307 	and.w	r3, r3, #7
 8000780:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0XF << ( 4 * temp2)) ;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	7c3a      	ldrb	r2, [r7, #16]
 8000788:	3208      	adds	r2, #8
 800078a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	220f      	movs	r2, #15
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	4618      	mov	r0, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	7c3a      	ldrb	r2, [r7, #16]
 80007a2:	4001      	ands	r1, r0
 80007a4:	3208      	adds	r2, #8
 80007a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2) ;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	7c3a      	ldrb	r2, [r7, #16]
 80007b0:	3208      	adds	r2, #8
 80007b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	7a5b      	ldrb	r3, [r3, #9]
 80007ba:	461a      	mov	r2, r3
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	4618      	mov	r0, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	7c3a      	ldrb	r2, [r7, #16]
 80007cc:	4301      	orrs	r1, r0
 80007ce:	3208      	adds	r2, #8
 80007d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80007d4:	bf00      	nop
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40013c00 	.word	0x40013c00
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40021c00 	.word	0x40021c00
 80007f8:	40013800 	.word	0x40013800

080007fc <GPIO_ReadFromInputPin>:
	else if (pGPIOx == GPIOH){
		GPIOH_REG_RESET();	}
}

//Data Read and Write :
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	691a      	ldr	r2, [r3, #16]
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	fa22 f303 	lsr.w	r3, r2, r3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	73fb      	strb	r3, [r7, #15]
	return value;
 800081a:	7bfb      	ldrb	r3, [r7, #15]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <SPI_PeriClockControl>:
 */


#include "stm32f411ceu6_spi_driver.h"

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx , uint8_t EnorDi){
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d136      	bne.n	80008a8 <SPI_PeriClockControl+0x80>
		if(pSPIx == SPI1){
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a38      	ldr	r2, [pc, #224]	@ (8000920 <SPI_PeriClockControl+0xf8>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d106      	bne.n	8000850 <SPI_PeriClockControl+0x28>
			SPI1_PERI_CLOCK_EN();
 8000842:	4b38      	ldr	r3, [pc, #224]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	4a37      	ldr	r2, [pc, #220]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 8000848:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800084c:	6453      	str	r3, [r2, #68]	@ 0x44
		}
		else if(pSPIx == SPI5){
			SPI5_PERI_CLOCK_DI();
		}
	}
}
 800084e:	e061      	b.n	8000914 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI2){
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a35      	ldr	r2, [pc, #212]	@ (8000928 <SPI_PeriClockControl+0x100>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d106      	bne.n	8000866 <SPI_PeriClockControl+0x3e>
			SPI2_PERI_CLOCK_EN();
 8000858:	4b32      	ldr	r3, [pc, #200]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	4a31      	ldr	r2, [pc, #196]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000862:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000864:	e056      	b.n	8000914 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI3){
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a30      	ldr	r2, [pc, #192]	@ (800092c <SPI_PeriClockControl+0x104>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d106      	bne.n	800087c <SPI_PeriClockControl+0x54>
			SPI3_PERI_CLOCK_EN();
 800086e:	4b2d      	ldr	r3, [pc, #180]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	4a2c      	ldr	r2, [pc, #176]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 8000874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000878:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800087a:	e04b      	b.n	8000914 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI4){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a2c      	ldr	r2, [pc, #176]	@ (8000930 <SPI_PeriClockControl+0x108>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d106      	bne.n	8000892 <SPI_PeriClockControl+0x6a>
			SPI4_PERI_CLOCK_EN();
 8000884:	4b27      	ldr	r3, [pc, #156]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 8000886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000888:	4a26      	ldr	r2, [pc, #152]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 800088a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800088e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000890:	e040      	b.n	8000914 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI5){
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a27      	ldr	r2, [pc, #156]	@ (8000934 <SPI_PeriClockControl+0x10c>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d13c      	bne.n	8000914 <SPI_PeriClockControl+0xec>
			SPI5_PERI_CLOCK_EN();
 800089a:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	4a21      	ldr	r2, [pc, #132]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 80008a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80008a4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008a6:	e035      	b.n	8000914 <SPI_PeriClockControl+0xec>
		if(pSPIx == SPI1){
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a1d      	ldr	r2, [pc, #116]	@ (8000920 <SPI_PeriClockControl+0xf8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d106      	bne.n	80008be <SPI_PeriClockControl+0x96>
			SPI1_PERI_CLOCK_DI();
 80008b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 80008b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 80008b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008ba:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008bc:	e02a      	b.n	8000914 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI2){
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a19      	ldr	r2, [pc, #100]	@ (8000928 <SPI_PeriClockControl+0x100>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d106      	bne.n	80008d4 <SPI_PeriClockControl+0xac>
			SPI2_PERI_CLOCK_DI();
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 80008cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008d0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008d2:	e01f      	b.n	8000914 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI3){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a15      	ldr	r2, [pc, #84]	@ (800092c <SPI_PeriClockControl+0x104>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d106      	bne.n	80008ea <SPI_PeriClockControl+0xc2>
			SPI3_PERI_CLOCK_DI();
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 80008e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008e6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008e8:	e014      	b.n	8000914 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI4){
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <SPI_PeriClockControl+0x108>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d106      	bne.n	8000900 <SPI_PeriClockControl+0xd8>
			SPI4_PERI_CLOCK_DI();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 80008f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80008fc:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008fe:	e009      	b.n	8000914 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI5){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a0c      	ldr	r2, [pc, #48]	@ (8000934 <SPI_PeriClockControl+0x10c>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d105      	bne.n	8000914 <SPI_PeriClockControl+0xec>
			SPI5_PERI_CLOCK_DI();
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 800090a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090c:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <SPI_PeriClockControl+0xfc>)
 800090e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000912:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	40013000 	.word	0x40013000
 8000924:	40023800 	.word	0x40023800
 8000928:	40003800 	.word	0x40003800
 800092c:	40003c00 	.word	0x40003c00
 8000930:	40013400 	.word	0x40013400
 8000934:	40015000 	.word	0x40015000

08000938 <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d106      	bne.n	8000958 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1<<6);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1<<6);
	}
}
 8000956:	e005      	b.n	8000964 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<<6);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	601a      	str	r2, [r3, #0]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <SPI_SSOE_Config>:
	}else{
		pSPIx->CR1 &= ~(1<<8);
	}
}

void SPI_SSOE_Config(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d106      	bne.n	8000990 <SPI_SSOE_Config+0x20>
		pSPIx->CR2 |= (1<< 2);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f043 0204 	orr.w	r2, r3, #4
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	605a      	str	r2, [r3, #4]
	}
	else{
		pSPIx->CR2 &= ~(1<< 2);
	}
}
 800098e:	e005      	b.n	800099c <SPI_SSOE_Config+0x2c>
		pSPIx->CR2 &= ~(1<< 2);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f023 0204 	bic.w	r2, r3, #4
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	605a      	str	r2, [r3, #4]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <SPI_Init>:


// Init and De-Init :
void SPI_Init(SPI_Handle_t *pSPIHandle){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2101      	movs	r1, #1
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff34 	bl	8000828 <SPI_PeriClockControl>
	//1. Configuring the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	791b      	ldrb	r3, [r3, #4]
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]

	//2. Configuring the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	795b      	ldrb	r3, [r3, #5]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d104      	bne.n	80009de <SPI_Init+0x36>
		//Bidirectional mode should be cleared
		tempreg &= ~(1<<15);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	e014      	b.n	8000a08 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	795b      	ldrb	r3, [r3, #5]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d104      	bne.n	80009f0 <SPI_Init+0x48>
		//Bidirection mode should be set
		tempreg |= (1<<15);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	e00b      	b.n	8000a08 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_S_RXONLY){
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	795b      	ldrb	r3, [r3, #5]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d107      	bne.n	8000a08 <SPI_Init+0x60>
		//make sure BiDi mode is cleared
		tempreg &= ~(1<< 15);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009fe:	60fb      	str	r3, [r7, #12]
		//RxOnly bit must be set
		tempreg |= (1<<10);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a06:	60fb      	str	r3, [r7, #12]
	}

	//3. Configuring the Clock Speed
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	799b      	ldrb	r3, [r3, #6]
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]

	//4. Configuring the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL<<1;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7a1b      	ldrb	r3, [r3, #8]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]

	//5. Configuring the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA <<0 ;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	7a5b      	ldrb	r3, [r3, #9]
 8000a24:	461a      	mov	r2, r3
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]

	//6. Configuring the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	79db      	ldrb	r3, [r3, #7]
 8000a30:	02db      	lsls	r3, r3, #11
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]

	//7. Configuring the SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << 9;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	7a9b      	ldrb	r3, [r3, #10]
 8000a3c:	025b      	lsls	r3, r3, #9
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <SPI_GetFlagSTatus>:
	}
}



uint8_t SPI_GetFlagSTatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	4013      	ands	r3, r2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SPI_GetFlagSTatus+0x1a>
		return FLAG_SET;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e000      	b.n	8000a70 <SPI_GetFlagSTatus+0x1c>
	}
	return FLAG_RESET;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SPI_SendData>:



//Data Read and Write :
void SPI_SendData(SPI_RegDef_t *pSPIx , uint8_t *pTxBuffer , uint32_t Len){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000a88:	e027      	b.n	8000ada <SPI_SendData+0x5e>
		//1. Wait until TXE is set
		while(SPI_GetFlagSTatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000a8a:	bf00      	nop
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f7ff ffe0 	bl	8000a54 <SPI_GetFlagSTatus>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f8      	beq.n	8000a8c <SPI_SendData+0x10>

		//2. Check the DFF Bit
		if(pSPIx->CR1 & (1 << 11)){
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00e      	beq.n	8000ac4 <SPI_SendData+0x48>
			//16 bit DFF
			//1. Load the data into the DR
			pSPIx->DR = *(uint16_t*)pTxBuffer;
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	60da      	str	r2, [r3, #12]
			Len--;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
			Len--;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
			(uint16_t*) pTxBuffer++ ;
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	e00a      	b.n	8000ada <SPI_SendData+0x5e>
		}
		else{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	60da      	str	r2, [r3, #12]
			Len--;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1d4      	bne.n	8000a8a <SPI_SendData+0xe>
		}
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <SPI_RecieveData>:
void SPI_RecieveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer , uint32_t Len){
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b084      	sub	sp, #16
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000af6:	e027      	b.n	8000b48 <SPI_RecieveData+0x5e>
		//1. Wait until RXNE is set
		while(SPI_GetFlagSTatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000af8:	bf00      	nop
 8000afa:	2101      	movs	r1, #1
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f7ff ffa9 	bl	8000a54 <SPI_GetFlagSTatus>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0f8      	beq.n	8000afa <SPI_RecieveData+0x10>

		//2. Check the DFF Bit
		if(pSPIx->CR1 & (1 << 11)){
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00e      	beq.n	8000b32 <SPI_RecieveData+0x48>
			//16 bit DFF
			//1. Load the data from DR to RxBuffer Address
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	801a      	strh	r2, [r3, #0]
			Len--;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
			Len--;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	607b      	str	r3, [r7, #4]
			(uint16_t*) pRxBuffer++ ;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	e00a      	b.n	8000b48 <SPI_RecieveData+0x5e>
		}
		else{
			//8 bit DFF
			*(pRxBuffer) = pSPIx->DR;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	701a      	strb	r2, [r3, #0]
			Len--;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	3301      	adds	r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1d4      	bne.n	8000af8 <SPI_RecieveData+0xe>
		}
	}
}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <__libc_init_array>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	4d0d      	ldr	r5, [pc, #52]	@ (8000b90 <__libc_init_array+0x38>)
 8000b5c:	4c0d      	ldr	r4, [pc, #52]	@ (8000b94 <__libc_init_array+0x3c>)
 8000b5e:	1b64      	subs	r4, r4, r5
 8000b60:	10a4      	asrs	r4, r4, #2
 8000b62:	2600      	movs	r6, #0
 8000b64:	42a6      	cmp	r6, r4
 8000b66:	d109      	bne.n	8000b7c <__libc_init_array+0x24>
 8000b68:	4d0b      	ldr	r5, [pc, #44]	@ (8000b98 <__libc_init_array+0x40>)
 8000b6a:	4c0c      	ldr	r4, [pc, #48]	@ (8000b9c <__libc_init_array+0x44>)
 8000b6c:	f000 f818 	bl	8000ba0 <_init>
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	10a4      	asrs	r4, r4, #2
 8000b74:	2600      	movs	r6, #0
 8000b76:	42a6      	cmp	r6, r4
 8000b78:	d105      	bne.n	8000b86 <__libc_init_array+0x2e>
 8000b7a:	bd70      	pop	{r4, r5, r6, pc}
 8000b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b80:	4798      	blx	r3
 8000b82:	3601      	adds	r6, #1
 8000b84:	e7ee      	b.n	8000b64 <__libc_init_array+0xc>
 8000b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b8a:	4798      	blx	r3
 8000b8c:	3601      	adds	r6, #1
 8000b8e:	e7f2      	b.n	8000b76 <__libc_init_array+0x1e>
 8000b90:	08000bb8 	.word	0x08000bb8
 8000b94:	08000bb8 	.word	0x08000bb8
 8000b98:	08000bb8 	.word	0x08000bb8
 8000b9c:	08000bbc 	.word	0x08000bbc

08000ba0 <_init>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	bf00      	nop
 8000ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ba6:	bc08      	pop	{r3}
 8000ba8:	469e      	mov	lr, r3
 8000baa:	4770      	bx	lr

08000bac <_fini>:
 8000bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bae:	bf00      	nop
 8000bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bb2:	bc08      	pop	{r3}
 8000bb4:	469e      	mov	lr, r3
 8000bb6:	4770      	bx	lr
